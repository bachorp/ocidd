#!/bin/busybox sh
set -eo pipefail

# shellcheck disable=SC2013
for arg in "$@"; do
    case $arg in
    dd.of=*)
        disk="${arg#*=}"
        ;;
    dd.bs=*)
        blocksize="${arg#*=}"
        ;;
    oci.tag=*)
        tag="${arg#*=}"
        ;;
    oci.blob=*)
        blob="${arg#*=}"
        ;;
    oci.allow_no_tls)
        allow_no_tls="yes"
        ;;
    wait)
        wait="yes"
        ;;
    esac
done

tag_c="\033[0;34m%s\033[0m"
blob_c="\033[0;32m%s\033[0m"
disk_c="\033[0;31m%s\033[0m"
blocksize_c="\033[0;33m%s\033[0m"

### TLS ###

if [ -n "$allow_no_tls" ]; then
    echo "Note: Allowed to fetch without TLS"
    oras_extra=" --plain-http"
fi

### blob ###

if [ -z "$blob" ]; then
    if [ -z "$tag" ]; then
        # shellcheck disable=SC2059
        printf "Please specify the OCI $tag_c (empty for specifying a blob instead): " tag
        read -r tag
        while [ -z "$tag" ] && [ -z "$blob" ]; do
            # shellcheck disable=SC2059
            printf "Please specify the OCI $blob_c: " blob
            read -r blob
        done
    fi
else
    if [ -n "$tag" ]; then
        echo "Error: Both 'oci.tag' and 'oci.blob' given"
        exit 1
    fi
fi

if [ -n "$tag" ]; then
    echo "Fetching manifest for tag '$tag'"
    # shellcheck disable=SC2086
    manifest="$(oras manifest fetch$oras_extra "$tag")"

    layer="$(echo "$manifest" | jq '.layers.[] | select (.mediaType == "application/octet-stream+gzip")' || (echo "Error: Malformed manifest (multiple manifests for tag not allowed): $manifest" && exit 1))"
    if [ -z "$layer" ]; then
        echo "Error: Manifest for tag '$tag' does not declare exactly one layer of media type 'application/octet-stream+gzip'"
        exit 1
    fi
    digest="$(echo "$layer" | jq --raw-output .digest || (echo "Error: Malformed manifest.layer[]: $layer" && exit 1))"
    blob="$tag@$digest"
fi
echo "Using blob '$blob'"

### disk ###

echo Current disk layout:
fdisk -l
echo

while [ -z "$disk" ]; do
    # shellcheck disable=SC2059
    printf "Please specify the target $disk_c: " disk
    read -r disk
done

if [ ! -e "$disk" ]; then
    echo "Error: Disk '$disk' not found"
    exit 1
fi
echo "Using disk '$disk'"

### blocksize ###

while [ -z "$blocksize" ]; do
    # shellcheck disable=SC2059
    printf "Please specify the $blocksize_c: " blocksize
    read -r blocksize
done
echo "Using blocksize '$blocksize'"

### wait ###

if [ -n "$wait" ]; then
    # shellcheck disable=SC2059
    printf "Confirm copying blob $blob_c to disk $disk_c in blocks of size $blocksize_c? (yes): " "$blob" "$disk" "$blocksize"
    read -r input
    if [ "$input" != "yes" ]; then
        echo "Operation canceled!"
        exit 1
    fi
fi

### main ###

echo "Fetching, decompressing, and writing blob '$blob' to disk '$disk' in blocks of size '$blocksize'"
# shellcheck disable=SC2086
oras blob fetch$oras_extra --output - "$blob" | gunzip --stdout | dd bs="$blocksize" of="$disk" &
pid=$!

monitor_dd() {
    sleep 5 # NOTE: We need to wait for dd to start handling signals (otherwise it will crash)
    while kill -0 "$1" 2>/dev/null; do
        kill -USR1 "$1"
        sleep 5
    done
}

monitor_dd "$pid" &
wait "$pid" || (echo "Error: Procedure failed with code $? - disk may be corrupted!" && exit 1)
